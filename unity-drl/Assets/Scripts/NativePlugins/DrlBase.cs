/* THIS FILE IS GENERATED AUTOMATICALLY
 * DO NOT EDIT THIS FILE
 */

using System;
using Utils;

#if !UNITY_EDITOR
using System.Runtime.InteropServices;
#endif

namespace NativePlugins
{
    public unsafe abstract class DrlBase : NativePlugin
    {
#if UNITY_STANDALONE_WIN
        protected const string DynamicLibraryName = "drl.dll";
#elif UNITY_STANDALONE_OSX
        protected const string DynamicLibraryName = "drl.dylib";
#else
        protected const string DynamicLibraryName = "drl.so";
#endif

#if !UNITY_EDITOR
        [DllImport(DrlBase.DynamicLibraryName, EntryPoint = "initialize", CallingConvention = CallingConvention.Cdecl)]
        private static extern IntPtr _Initialize();

        [DllImport(DrlBase.DynamicLibraryName, EntryPoint = "dispose", CallingConvention = CallingConvention.Cdecl)]
        private static extern void _Dispose(IntPtr handle);

        [DllImport(DrlBase.DynamicLibraryName, EntryPoint = "init_line_world", CallingConvention = CallingConvention.Cdecl)]
        private static extern void _InitLineWorld(IntPtr handle, UIntPtr numStates);

        [DllImport(DrlBase.DynamicLibraryName, EntryPoint = "init_grid_world", CallingConvention = CallingConvention.Cdecl)]
        private static extern void _InitGridWorld(IntPtr handle, UIntPtr width, UIntPtr height);

        [DllImport(DrlBase.DynamicLibraryName, EntryPoint = "run", CallingConvention = CallingConvention.Cdecl)]
        private static extern void _Run(IntPtr handle, NativePlugins.Types.Algorithm alg);

        [DllImport(DrlBase.DynamicLibraryName, EntryPoint = "set_gamma", CallingConvention = CallingConvention.Cdecl)]
        private static extern void _SetGamma(IntPtr handle, float gamma);

        [DllImport(DrlBase.DynamicLibraryName, EntryPoint = "set_theta", CallingConvention = CallingConvention.Cdecl)]
        private static extern void _SetTheta(IntPtr handle, float theta);

        [DllImport(DrlBase.DynamicLibraryName, EntryPoint = "set_epsilon", CallingConvention = CallingConvention.Cdecl)]
        private static extern void _SetEpsilon(IntPtr handle, float epsilon);

        [DllImport(DrlBase.DynamicLibraryName, EntryPoint = "set_alpha", CallingConvention = CallingConvention.Cdecl)]
        private static extern void _SetAlpha(IntPtr handle, float alpha);

        [DllImport(DrlBase.DynamicLibraryName, EntryPoint = "set_nb_iter", CallingConvention = CallingConvention.Cdecl)]
        private static extern void _SetNbIter(IntPtr handle, int nbIter);

        [DllImport(DrlBase.DynamicLibraryName, EntryPoint = "set_max_step", CallingConvention = CallingConvention.Cdecl)]
        private static extern void _SetMaxStep(IntPtr handle, int maxStep);

        [DllImport(DrlBase.DynamicLibraryName, EntryPoint = "set_n", CallingConvention = CallingConvention.Cdecl)]
        private static extern void _SetN(IntPtr handle, int n);

        [DllImport(DrlBase.DynamicLibraryName, EntryPoint = "get_v", CallingConvention = CallingConvention.Cdecl)]
        private static extern float* _GetV(IntPtr handle, UIntPtr* len);

        [DllImport(DrlBase.DynamicLibraryName, EntryPoint = "get_q", CallingConvention = CallingConvention.Cdecl)]
        private static extern float* _GetQ(IntPtr handle, UIntPtr* len, UIntPtr* nActions);

        [DllImport(DrlBase.DynamicLibraryName, EntryPoint = "get_pi", CallingConvention = CallingConvention.Cdecl)]
        private static extern float* _GetPi(IntPtr handle, UIntPtr* len, UIntPtr* nActions);
#else
        private delegate IntPtr DllInitialize();
        private delegate void DllDispose(IntPtr handle);
        private delegate void DllInitLineWorld(IntPtr handle, UIntPtr numStates);
        private delegate void DllInitGridWorld(IntPtr handle, UIntPtr width, UIntPtr height);
        private delegate void DllRun(IntPtr handle, NativePlugins.Types.Algorithm alg);
        private delegate void DllSetGamma(IntPtr handle, float gamma);
        private delegate void DllSetTheta(IntPtr handle, float theta);
        private delegate void DllSetEpsilon(IntPtr handle, float epsilon);
        private delegate void DllSetAlpha(IntPtr handle, float alpha);
        private delegate void DllSetNbIter(IntPtr handle, int nbIter);
        private delegate void DllSetMaxStep(IntPtr handle, int maxStep);
        private delegate void DllSetN(IntPtr handle, int n);
        private delegate float* DllGetV(IntPtr handle, UIntPtr* len);
        private delegate float* DllGetQ(IntPtr handle, UIntPtr* len, UIntPtr* nActions);
        private delegate float* DllGetPi(IntPtr handle, UIntPtr* len, UIntPtr* nActions);
#endif

        public DrlBase()
        {
#if !UNITY_EDITOR
            this.Handle = _Initialize();
#else
            this.DllHandle = NativePluginLoader.LoadPlugin("drl");
            this.Handle = NativePluginLoader.GetDelegate<DllInitialize>(this.DllHandle, "initialize")();
#endif
        }

        public void Dispose()
        {
            this.CheckHandle();

#if !UNITY_EDITOR
            _Dispose(this.Handle);
#else
            NativePluginLoader.GetDelegate<DllDispose>(this.DllHandle, "dispose")(this.Handle);
            NativePluginLoader.FreePlugin(this.DllHandle);
            this.DllHandle = IntPtr.Zero;
#endif
            this.Handle = IntPtr.Zero;
        }

        public void InitLineWorld(UIntPtr numStates)
        {
            this.CheckHandle();
#if !UNITY_EDITOR
            _InitLineWorld(this.Handle, numStates);
#else
            NativePluginLoader.GetDelegate<DllInitLineWorld>(this.DllHandle, "init_line_world")(this.Handle, numStates);
#endif
        }

        public void InitGridWorld(UIntPtr width, UIntPtr height)
        {
            this.CheckHandle();
#if !UNITY_EDITOR
            _InitGridWorld(this.Handle, width, height);
#else
            NativePluginLoader.GetDelegate<DllInitGridWorld>(this.DllHandle, "init_grid_world")(this.Handle, width, height);
#endif
        }

        public void Run(NativePlugins.Types.Algorithm alg)
        {
            this.CheckHandle();
#if !UNITY_EDITOR
            _Run(this.Handle, alg);
#else
            NativePluginLoader.GetDelegate<DllRun>(this.DllHandle, "run")(this.Handle, alg);
#endif
        }

        public void SetGamma(float gamma)
        {
            this.CheckHandle();
#if !UNITY_EDITOR
            _SetGamma(this.Handle, gamma);
#else
            NativePluginLoader.GetDelegate<DllSetGamma>(this.DllHandle, "set_gamma")(this.Handle, gamma);
#endif
        }

        public void SetTheta(float theta)
        {
            this.CheckHandle();
#if !UNITY_EDITOR
            _SetTheta(this.Handle, theta);
#else
            NativePluginLoader.GetDelegate<DllSetTheta>(this.DllHandle, "set_theta")(this.Handle, theta);
#endif
        }

        public void SetEpsilon(float epsilon)
        {
            this.CheckHandle();
#if !UNITY_EDITOR
            _SetEpsilon(this.Handle, epsilon);
#else
            NativePluginLoader.GetDelegate<DllSetEpsilon>(this.DllHandle, "set_epsilon")(this.Handle, epsilon);
#endif
        }

        public void SetAlpha(float alpha)
        {
            this.CheckHandle();
#if !UNITY_EDITOR
            _SetAlpha(this.Handle, alpha);
#else
            NativePluginLoader.GetDelegate<DllSetAlpha>(this.DllHandle, "set_alpha")(this.Handle, alpha);
#endif
        }

        public void SetNbIter(int nbIter)
        {
            this.CheckHandle();
#if !UNITY_EDITOR
            _SetNbIter(this.Handle, nbIter);
#else
            NativePluginLoader.GetDelegate<DllSetNbIter>(this.DllHandle, "set_nb_iter")(this.Handle, nbIter);
#endif
        }

        public void SetMaxStep(int maxStep)
        {
            this.CheckHandle();
#if !UNITY_EDITOR
            _SetMaxStep(this.Handle, maxStep);
#else
            NativePluginLoader.GetDelegate<DllSetMaxStep>(this.DllHandle, "set_max_step")(this.Handle, maxStep);
#endif
        }

        public void SetN(int n)
        {
            this.CheckHandle();
#if !UNITY_EDITOR
            _SetN(this.Handle, n);
#else
            NativePluginLoader.GetDelegate<DllSetN>(this.DllHandle, "set_n")(this.Handle, n);
#endif
        }

        public float* GetV(UIntPtr* len)
        {
            this.CheckHandle();
#if !UNITY_EDITOR
            return _GetV(this.Handle, len);
#else
            return NativePluginLoader.GetDelegate<DllGetV>(this.DllHandle, "get_v")(this.Handle, len);
#endif
        }

        public float* GetQ(UIntPtr* len, UIntPtr* nActions)
        {
            this.CheckHandle();
#if !UNITY_EDITOR
            return _GetQ(this.Handle, len, nActions);
#else
            return NativePluginLoader.GetDelegate<DllGetQ>(this.DllHandle, "get_q")(this.Handle, len, nActions);
#endif
        }

        public float* GetPi(UIntPtr* len, UIntPtr* nActions)
        {
            this.CheckHandle();
#if !UNITY_EDITOR
            return _GetPi(this.Handle, len, nActions);
#else
            return NativePluginLoader.GetDelegate<DllGetPi>(this.DllHandle, "get_pi")(this.Handle, len, nActions);
#endif
        }

    }
}
